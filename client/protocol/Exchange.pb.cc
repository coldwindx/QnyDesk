// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Exchange.proto

#include "Exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace BigPack {
constexpr Exchange::Exchange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , targetid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , errorcode_(0)
  , _oneof_case_{}{}
struct ExchangeDefaultTypeInternal {
  constexpr ExchangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeDefaultTypeInternal() {}
  union {
    Exchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeDefaultTypeInternal _Exchange_default_instance_;
constexpr WMHeartBeat::WMHeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WMHeartBeatDefaultTypeInternal {
  constexpr WMHeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WMHeartBeatDefaultTypeInternal() {}
  union {
    WMHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WMHeartBeatDefaultTypeInternal _WMHeartBeat_default_instance_;
constexpr CsHostInfo::CsHostInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , macaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , active_(0){}
struct CsHostInfoDefaultTypeInternal {
  constexpr CsHostInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CsHostInfoDefaultTypeInternal() {}
  union {
    CsHostInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CsHostInfoDefaultTypeInternal _CsHostInfo_default_instance_;
constexpr ScReplyInfo::ScReplyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : registerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ScReplyInfoDefaultTypeInternal {
  constexpr ScReplyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScReplyInfoDefaultTypeInternal() {}
  union {
    ScReplyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScReplyInfoDefaultTypeInternal _ScReplyInfo_default_instance_;
}  // namespace BigPack
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Exchange_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Exchange_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Exchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Exchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, type_),
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, resourceid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, targetid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, errorcode_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, dataBody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::WMHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CsHostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::CsHostInfo, cpuid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsHostInfo, deviceid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsHostInfo, macaddress_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsHostInfo, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyInfo, success_),
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyInfo, registerid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BigPack::Exchange)},
  { 12, -1, sizeof(::BigPack::WMHeartBeat)},
  { 17, -1, sizeof(::BigPack::CsHostInfo)},
  { 26, -1, sizeof(::BigPack::ScReplyInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_Exchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_WMHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CsHostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_ScReplyInfo_default_instance_),
};

const char descriptor_table_protodef_Exchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Exchange.proto\022\007BigPack\"\240\002\n\010Exchange\022("
  "\n\004type\030\001 \001(\0162\032.BigPack.Exchange.DataType"
  "\022\022\n\nresourceId\030\002 \001(\t\022\020\n\010targetId\030\003 \001(\t\022\021"
  "\n\terrorCode\030\004 \001(\005\022\'\n\010hostInfo\030\005 \001(\0132\023.Bi"
  "gPack.CsHostInfoH\000\022)\n\treplyInfo\030\006 \001(\0132\024."
  "BigPack.ScReplyInfoH\000\"Q\n\010DataType\022\021\n\rTyp"
  "eHeartBeat\020\000\022\024\n\020TypeRegisterHost\020\001\022\034\n\030Ty"
  "peReplyRegisterDetails\020\002B\n\n\010dataBody\"\r\n\013"
  "WMHeartBeat\"Q\n\nCsHostInfo\022\r\n\005cpuId\030\001 \001(\t"
  "\022\020\n\010deviceId\030\002 \001(\t\022\022\n\nmacAddress\030\003 \001(\t\022\016"
  "\n\006active\030\004 \001(\005\"2\n\013ScReplyInfo\022\017\n\007success"
  "\030\001 \001(\010\022\022\n\nregisterId\030\002 \001(\tB!\n\024com.qnydes"
  "k.protocolB\007BigPackH\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Exchange_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Exchange_2eproto = {
  false, false, 509, descriptor_table_protodef_Exchange_2eproto, "Exchange.proto", 
  &descriptor_table_Exchange_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_Exchange_2eproto::offsets,
  file_level_metadata_Exchange_2eproto, file_level_enum_descriptors_Exchange_2eproto, file_level_service_descriptors_Exchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Exchange_2eproto_getter() {
  return &descriptor_table_Exchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Exchange_2eproto(&descriptor_table_Exchange_2eproto);
namespace BigPack {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Exchange_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Exchange_2eproto);
  return file_level_enum_descriptors_Exchange_2eproto[0];
}
bool Exchange_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Exchange_DataType Exchange::TypeHeartBeat;
constexpr Exchange_DataType Exchange::TypeRegisterHost;
constexpr Exchange_DataType Exchange::TypeReplyRegisterDetails;
constexpr Exchange_DataType Exchange::DataType_MIN;
constexpr Exchange_DataType Exchange::DataType_MAX;
constexpr int Exchange::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Exchange::_Internal {
 public:
  static const ::BigPack::CsHostInfo& hostinfo(const Exchange* msg);
  static const ::BigPack::ScReplyInfo& replyinfo(const Exchange* msg);
};

const ::BigPack::CsHostInfo&
Exchange::_Internal::hostinfo(const Exchange* msg) {
  return *msg->dataBody_.hostinfo_;
}
const ::BigPack::ScReplyInfo&
Exchange::_Internal::replyinfo(const Exchange* msg) {
  return *msg->dataBody_.replyinfo_;
}
void Exchange::set_allocated_hostinfo(::BigPack::CsHostInfo* hostinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (hostinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostinfo);
    if (message_arena != submessage_arena) {
      hostinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostinfo, submessage_arena);
    }
    set_has_hostinfo();
    dataBody_.hostinfo_ = hostinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.hostInfo)
}
void Exchange::set_allocated_replyinfo(::BigPack::ScReplyInfo* replyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (replyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replyinfo);
    if (message_arena != submessage_arena) {
      replyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replyinfo, submessage_arena);
    }
    set_has_replyinfo();
    dataBody_.replyinfo_ = replyinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.replyInfo)
}
Exchange::Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.Exchange)
}
Exchange::Exchange(const Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourceid().empty()) {
    resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resourceid(), 
      GetArena());
  }
  targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetid().empty()) {
    targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetid(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(errorcode_));
  clear_has_dataBody();
  switch (from.dataBody_case()) {
    case kHostInfo: {
      _internal_mutable_hostinfo()->::BigPack::CsHostInfo::MergeFrom(from._internal_hostinfo());
      break;
    }
    case kReplyInfo: {
      _internal_mutable_replyinfo()->::BigPack::ScReplyInfo::MergeFrom(from._internal_replyinfo());
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BigPack.Exchange)
}

void Exchange::SharedCtor() {
resourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(errorcode_));
clear_has_dataBody();
}

Exchange::~Exchange() {
  // @@protoc_insertion_point(destructor:BigPack.Exchange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Exchange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_dataBody()) {
    clear_dataBody();
  }
}

void Exchange::ArenaDtor(void* object) {
  Exchange* _this = reinterpret_cast< Exchange* >(object);
  (void)_this;
}
void Exchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Exchange::clear_dataBody() {
// @@protoc_insertion_point(one_of_clear_start:BigPack.Exchange)
  switch (dataBody_case()) {
    case kHostInfo: {
      if (GetArena() == nullptr) {
        delete dataBody_.hostinfo_;
      }
      break;
    }
    case kReplyInfo: {
      if (GetArena() == nullptr) {
        delete dataBody_.replyinfo_;
      }
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATABODY_NOT_SET;
}


void Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resourceid_.ClearToEmpty();
  targetid_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&type_)) + sizeof(errorcode_));
  clear_dataBody();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Exchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BigPack.Exchange.DataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::BigPack::Exchange_DataType>(val));
        } else goto handle_unusual;
        continue;
      // string resourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.Exchange.resourceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_targetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.Exchange.targetId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CsHostInfo hostInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.ScReplyInfo replyInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_replyinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Exchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BigPack.Exchange.DataType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string resourceId = 2;
  if (this->resourceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourceid().data(), static_cast<int>(this->_internal_resourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.Exchange.resourceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resourceid(), target);
  }

  // string targetId = 3;
  if (this->targetid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetid().data(), static_cast<int>(this->_internal_targetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.Exchange.targetId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetid(), target);
  }

  // int32 errorCode = 4;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_errorcode(), target);
  }

  // .BigPack.CsHostInfo hostInfo = 5;
  if (_internal_has_hostinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hostinfo(this), target, stream);
  }

  // .BigPack.ScReplyInfo replyInfo = 6;
  if (_internal_has_replyinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::replyinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.Exchange)
  return target;
}

size_t Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.Exchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resourceId = 2;
  if (this->resourceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourceid());
  }

  // string targetId = 3;
  if (this->targetid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetid());
  }

  // .BigPack.Exchange.DataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 errorCode = 4;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  switch (dataBody_case()) {
    // .BigPack.CsHostInfo hostInfo = 5;
    case kHostInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.hostinfo_);
      break;
    }
    // .BigPack.ScReplyInfo replyInfo = 6;
    case kReplyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.replyinfo_);
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  const Exchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Exchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.Exchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.Exchange)
    MergeFrom(*source);
  }
}

void Exchange::MergeFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resourceid().size() > 0) {
    _internal_set_resourceid(from._internal_resourceid());
  }
  if (from.targetid().size() > 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  switch (from.dataBody_case()) {
    case kHostInfo: {
      _internal_mutable_hostinfo()->::BigPack::CsHostInfo::MergeFrom(from._internal_hostinfo());
      break;
    }
    case kReplyInfo: {
      _internal_mutable_replyinfo()->::BigPack::ScReplyInfo::MergeFrom(from._internal_replyinfo());
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
}

void Exchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exchange::CopyFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exchange::IsInitialized() const {
  return true;
}

void Exchange::InternalSwap(Exchange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resourceid_.Swap(&other->resourceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetid_.Swap(&other->targetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Exchange, errorcode_)
      + sizeof(Exchange::errorcode_)
      - PROTOBUF_FIELD_OFFSET(Exchange, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(dataBody_, other->dataBody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Exchange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[0]);
}

// ===================================================================

class WMHeartBeat::_Internal {
 public:
};

WMHeartBeat::WMHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.WMHeartBeat)
}
WMHeartBeat::WMHeartBeat(const WMHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BigPack.WMHeartBeat)
}

void WMHeartBeat::SharedCtor() {
}

WMHeartBeat::~WMHeartBeat() {
  // @@protoc_insertion_point(destructor:BigPack.WMHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WMHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WMHeartBeat::ArenaDtor(void* object) {
  WMHeartBeat* _this = reinterpret_cast< WMHeartBeat* >(object);
  (void)_this;
}
void WMHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WMHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WMHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.WMHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WMHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WMHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.WMHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.WMHeartBeat)
  return target;
}

size_t WMHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.WMHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WMHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.WMHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const WMHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WMHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.WMHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.WMHeartBeat)
    MergeFrom(*source);
  }
}

void WMHeartBeat::MergeFrom(const WMHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.WMHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WMHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.WMHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WMHeartBeat::CopyFrom(const WMHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.WMHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WMHeartBeat::IsInitialized() const {
  return true;
}

void WMHeartBeat::InternalSwap(WMHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WMHeartBeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[1]);
}

// ===================================================================

class CsHostInfo::_Internal {
 public:
};

CsHostInfo::CsHostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CsHostInfo)
}
CsHostInfo::CsHostInfo(const CsHostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpuid().empty()) {
    cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpuid(), 
      GetArena());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArena());
  }
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_macaddress().empty()) {
    macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_macaddress(), 
      GetArena());
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:BigPack.CsHostInfo)
}

void CsHostInfo::SharedCtor() {
cpuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
active_ = 0;
}

CsHostInfo::~CsHostInfo() {
  // @@protoc_insertion_point(destructor:BigPack.CsHostInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CsHostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cpuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  macaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CsHostInfo::ArenaDtor(void* object) {
  CsHostInfo* _this = reinterpret_cast< CsHostInfo* >(object);
  (void)_this;
}
void CsHostInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CsHostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CsHostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CsHostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpuid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  macaddress_.ClearToEmpty();
  active_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsHostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpuId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsHostInfo.cpuId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsHostInfo.deviceId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string macAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_macaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsHostInfo.macAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CsHostInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CsHostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpuId = 1;
  if (this->cpuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpuid().data(), static_cast<int>(this->_internal_cpuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsHostInfo.cpuId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpuid(), target);
  }

  // string deviceId = 2;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsHostInfo.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string macAddress = 3;
  if (this->macaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_macaddress().data(), static_cast<int>(this->_internal_macaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsHostInfo.macAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_macaddress(), target);
  }

  // int32 active = 4;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CsHostInfo)
  return target;
}

size_t CsHostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CsHostInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpuId = 1;
  if (this->cpuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpuid());
  }

  // string deviceId = 2;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string macAddress = 3;
  if (this->macaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_macaddress());
  }

  // int32 active = 4;
  if (this->active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CsHostInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CsHostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CsHostInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CsHostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CsHostInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CsHostInfo)
    MergeFrom(*source);
  }
}

void CsHostInfo::MergeFrom(const CsHostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CsHostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpuid().size() > 0) {
    _internal_set_cpuid(from._internal_cpuid());
  }
  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.macaddress().size() > 0) {
    _internal_set_macaddress(from._internal_macaddress());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void CsHostInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CsHostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CsHostInfo::CopyFrom(const CsHostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CsHostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsHostInfo::IsInitialized() const {
  return true;
}

void CsHostInfo::InternalSwap(CsHostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpuid_.Swap(&other->cpuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  macaddress_.Swap(&other->macaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CsHostInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[2]);
}

// ===================================================================

class ScReplyInfo::_Internal {
 public:
};

ScReplyInfo::ScReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.ScReplyInfo)
}
ScReplyInfo::ScReplyInfo(const ScReplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  registerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registerid().empty()) {
    registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_registerid(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:BigPack.ScReplyInfo)
}

void ScReplyInfo::SharedCtor() {
registerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ScReplyInfo::~ScReplyInfo() {
  // @@protoc_insertion_point(destructor:BigPack.ScReplyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScReplyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  registerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScReplyInfo::ArenaDtor(void* object) {
  ScReplyInfo* _this = reinterpret_cast< ScReplyInfo* >(object);
  (void)_this;
}
void ScReplyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScReplyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScReplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.ScReplyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registerid_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScReplyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_registerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.ScReplyInfo.registerId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScReplyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.ScReplyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string registerId = 2;
  if (this->registerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registerid().data(), static_cast<int>(this->_internal_registerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.ScReplyInfo.registerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_registerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.ScReplyInfo)
  return target;
}

size_t ScReplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.ScReplyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string registerId = 2;
  if (this->registerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registerid());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScReplyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.ScReplyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScReplyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScReplyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.ScReplyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.ScReplyInfo)
    MergeFrom(*source);
  }
}

void ScReplyInfo::MergeFrom(const ScReplyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.ScReplyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.registerid().size() > 0) {
    _internal_set_registerid(from._internal_registerid());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ScReplyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.ScReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScReplyInfo::CopyFrom(const ScReplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.ScReplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScReplyInfo::IsInitialized() const {
  return true;
}

void ScReplyInfo::InternalSwap(ScReplyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  registerid_.Swap(&other->registerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScReplyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BigPack
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BigPack::Exchange* Arena::CreateMaybeMessage< ::BigPack::Exchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::Exchange >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::WMHeartBeat* Arena::CreateMaybeMessage< ::BigPack::WMHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::WMHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CsHostInfo* Arena::CreateMaybeMessage< ::BigPack::CsHostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CsHostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::ScReplyInfo* Arena::CreateMaybeMessage< ::BigPack::ScReplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::ScReplyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
