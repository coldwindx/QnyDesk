// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Exchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Exchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Exchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Exchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Exchange_2eproto;
namespace BigPack {
class CsHostInfo;
struct CsHostInfoDefaultTypeInternal;
extern CsHostInfoDefaultTypeInternal _CsHostInfo_default_instance_;
class CsRequestAuth;
struct CsRequestAuthDefaultTypeInternal;
extern CsRequestAuthDefaultTypeInternal _CsRequestAuth_default_instance_;
class CsWheelEvent;
struct CsWheelEventDefaultTypeInternal;
extern CsWheelEventDefaultTypeInternal _CsWheelEvent_default_instance_;
class Exchange;
struct ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class ScReplyInfo;
struct ScReplyInfoDefaultTypeInternal;
extern ScReplyInfoDefaultTypeInternal _ScReplyInfo_default_instance_;
class WMHeartBeat;
struct WMHeartBeatDefaultTypeInternal;
extern WMHeartBeatDefaultTypeInternal _WMHeartBeat_default_instance_;
}  // namespace BigPack
PROTOBUF_NAMESPACE_OPEN
template<> ::BigPack::CsHostInfo* Arena::CreateMaybeMessage<::BigPack::CsHostInfo>(Arena*);
template<> ::BigPack::CsRequestAuth* Arena::CreateMaybeMessage<::BigPack::CsRequestAuth>(Arena*);
template<> ::BigPack::CsWheelEvent* Arena::CreateMaybeMessage<::BigPack::CsWheelEvent>(Arena*);
template<> ::BigPack::Exchange* Arena::CreateMaybeMessage<::BigPack::Exchange>(Arena*);
template<> ::BigPack::ScReplyInfo* Arena::CreateMaybeMessage<::BigPack::ScReplyInfo>(Arena*);
template<> ::BigPack::WMHeartBeat* Arena::CreateMaybeMessage<::BigPack::WMHeartBeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BigPack {

enum Exchange_DataType : int {
  Exchange_DataType_TypeHeartBeat = 0,
  Exchange_DataType_TypeRegisterHost = 1,
  Exchange_DataType_TypeReplyRegisterDetails = 2,
  Exchange_DataType_TypeRequestAuth = 3,
  Exchange_DataType_Exchange_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Exchange_DataType_Exchange_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Exchange_DataType_IsValid(int value);
constexpr Exchange_DataType Exchange_DataType_DataType_MIN = Exchange_DataType_TypeHeartBeat;
constexpr Exchange_DataType Exchange_DataType_DataType_MAX = Exchange_DataType_TypeRequestAuth;
constexpr int Exchange_DataType_DataType_ARRAYSIZE = Exchange_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Exchange_DataType_descriptor();
template<typename T>
inline const std::string& Exchange_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Exchange_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Exchange_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Exchange_DataType_descriptor(), enum_t_value);
}
inline bool Exchange_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Exchange_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Exchange_DataType>(
    Exchange_DataType_descriptor(), name, value);
}
// ===================================================================

class Exchange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.Exchange) */ {
 public:
  inline Exchange() : Exchange(nullptr) {}
  ~Exchange() override;
  explicit constexpr Exchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Exchange(const Exchange& from);
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exchange& operator=(Exchange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exchange& default_instance() {
    return *internal_default_instance();
  }
  enum DataBodyCase {
    kHostInfo = 5,
    kReplyInfo = 6,
    DATABODY_NOT_SET = 0,
  };

  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(Exchange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return CreateMaybeMessage<Exchange>(nullptr);
  }

  Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Exchange& from);
  void MergeFrom(const Exchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.Exchange";
  }
  protected:
  explicit Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Exchange_DataType DataType;
  static constexpr DataType TypeHeartBeat =
    Exchange_DataType_TypeHeartBeat;
  static constexpr DataType TypeRegisterHost =
    Exchange_DataType_TypeRegisterHost;
  static constexpr DataType TypeReplyRegisterDetails =
    Exchange_DataType_TypeReplyRegisterDetails;
  static constexpr DataType TypeRequestAuth =
    Exchange_DataType_TypeRequestAuth;
  static inline bool DataType_IsValid(int value) {
    return Exchange_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    Exchange_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    Exchange_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    Exchange_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return Exchange_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return Exchange_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return Exchange_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kRequestAuthFieldNumber = 7,
    kWheelEventFieldNumber = 8,
    kTypeFieldNumber = 1,
    kErrorCodeFieldNumber = 4,
    kHostInfoFieldNumber = 5,
    kReplyInfoFieldNumber = 6,
  };
  // string resourceId = 2;
  void clear_resourceid();
  const std::string& resourceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourceid();
  std::string* release_resourceid();
  void set_allocated_resourceid(std::string* resourceid);
  private:
  const std::string& _internal_resourceid() const;
  void _internal_set_resourceid(const std::string& value);
  std::string* _internal_mutable_resourceid();
  public:

  // string targetId = 3;
  void clear_targetid();
  const std::string& targetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // .BigPack.CsRequestAuth requestAuth = 7;
  bool has_requestauth() const;
  private:
  bool _internal_has_requestauth() const;
  public:
  void clear_requestauth();
  const ::BigPack::CsRequestAuth& requestauth() const;
  ::BigPack::CsRequestAuth* release_requestauth();
  ::BigPack::CsRequestAuth* mutable_requestauth();
  void set_allocated_requestauth(::BigPack::CsRequestAuth* requestauth);
  private:
  const ::BigPack::CsRequestAuth& _internal_requestauth() const;
  ::BigPack::CsRequestAuth* _internal_mutable_requestauth();
  public:
  void unsafe_arena_set_allocated_requestauth(
      ::BigPack::CsRequestAuth* requestauth);
  ::BigPack::CsRequestAuth* unsafe_arena_release_requestauth();

  // .BigPack.CsWheelEvent wheelEvent = 8;
  bool has_wheelevent() const;
  private:
  bool _internal_has_wheelevent() const;
  public:
  void clear_wheelevent();
  const ::BigPack::CsWheelEvent& wheelevent() const;
  ::BigPack::CsWheelEvent* release_wheelevent();
  ::BigPack::CsWheelEvent* mutable_wheelevent();
  void set_allocated_wheelevent(::BigPack::CsWheelEvent* wheelevent);
  private:
  const ::BigPack::CsWheelEvent& _internal_wheelevent() const;
  ::BigPack::CsWheelEvent* _internal_mutable_wheelevent();
  public:
  void unsafe_arena_set_allocated_wheelevent(
      ::BigPack::CsWheelEvent* wheelevent);
  ::BigPack::CsWheelEvent* unsafe_arena_release_wheelevent();

  // .BigPack.Exchange.DataType type = 1;
  void clear_type();
  ::BigPack::Exchange_DataType type() const;
  void set_type(::BigPack::Exchange_DataType value);
  private:
  ::BigPack::Exchange_DataType _internal_type() const;
  void _internal_set_type(::BigPack::Exchange_DataType value);
  public:

  // int32 errorCode = 4;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .BigPack.CsHostInfo hostInfo = 5;
  bool has_hostinfo() const;
  private:
  bool _internal_has_hostinfo() const;
  public:
  void clear_hostinfo();
  const ::BigPack::CsHostInfo& hostinfo() const;
  ::BigPack::CsHostInfo* release_hostinfo();
  ::BigPack::CsHostInfo* mutable_hostinfo();
  void set_allocated_hostinfo(::BigPack::CsHostInfo* hostinfo);
  private:
  const ::BigPack::CsHostInfo& _internal_hostinfo() const;
  ::BigPack::CsHostInfo* _internal_mutable_hostinfo();
  public:
  void unsafe_arena_set_allocated_hostinfo(
      ::BigPack::CsHostInfo* hostinfo);
  ::BigPack::CsHostInfo* unsafe_arena_release_hostinfo();

  // .BigPack.ScReplyInfo replyInfo = 6;
  bool has_replyinfo() const;
  private:
  bool _internal_has_replyinfo() const;
  public:
  void clear_replyinfo();
  const ::BigPack::ScReplyInfo& replyinfo() const;
  ::BigPack::ScReplyInfo* release_replyinfo();
  ::BigPack::ScReplyInfo* mutable_replyinfo();
  void set_allocated_replyinfo(::BigPack::ScReplyInfo* replyinfo);
  private:
  const ::BigPack::ScReplyInfo& _internal_replyinfo() const;
  ::BigPack::ScReplyInfo* _internal_mutable_replyinfo();
  public:
  void unsafe_arena_set_allocated_replyinfo(
      ::BigPack::ScReplyInfo* replyinfo);
  ::BigPack::ScReplyInfo* unsafe_arena_release_replyinfo();

  void clear_dataBody();
  DataBodyCase dataBody_case() const;
  // @@protoc_insertion_point(class_scope:BigPack.Exchange)
 private:
  class _Internal;
  void set_has_hostinfo();
  void set_has_replyinfo();

  inline bool has_dataBody() const;
  inline void clear_has_dataBody();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::BigPack::CsRequestAuth* requestauth_;
  ::BigPack::CsWheelEvent* wheelevent_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  union DataBodyUnion {
    constexpr DataBodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::BigPack::CsHostInfo* hostinfo_;
    ::BigPack::ScReplyInfo* replyinfo_;
  } dataBody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class WMHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.WMHeartBeat) */ {
 public:
  inline WMHeartBeat() : WMHeartBeat(nullptr) {}
  ~WMHeartBeat() override;
  explicit constexpr WMHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WMHeartBeat(const WMHeartBeat& from);
  WMHeartBeat(WMHeartBeat&& from) noexcept
    : WMHeartBeat() {
    *this = ::std::move(from);
  }

  inline WMHeartBeat& operator=(const WMHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline WMHeartBeat& operator=(WMHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WMHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const WMHeartBeat* internal_default_instance() {
    return reinterpret_cast<const WMHeartBeat*>(
               &_WMHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WMHeartBeat& a, WMHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(WMHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WMHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WMHeartBeat* New() const final {
    return CreateMaybeMessage<WMHeartBeat>(nullptr);
  }

  WMHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WMHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WMHeartBeat& from);
  void MergeFrom(const WMHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WMHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.WMHeartBeat";
  }
  protected:
  explicit WMHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BigPack.WMHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CsHostInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CsHostInfo) */ {
 public:
  inline CsHostInfo() : CsHostInfo(nullptr) {}
  ~CsHostInfo() override;
  explicit constexpr CsHostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsHostInfo(const CsHostInfo& from);
  CsHostInfo(CsHostInfo&& from) noexcept
    : CsHostInfo() {
    *this = ::std::move(from);
  }

  inline CsHostInfo& operator=(const CsHostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsHostInfo& operator=(CsHostInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsHostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsHostInfo* internal_default_instance() {
    return reinterpret_cast<const CsHostInfo*>(
               &_CsHostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CsHostInfo& a, CsHostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CsHostInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsHostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsHostInfo* New() const final {
    return CreateMaybeMessage<CsHostInfo>(nullptr);
  }

  CsHostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsHostInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsHostInfo& from);
  void MergeFrom(const CsHostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsHostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CsHostInfo";
  }
  protected:
  explicit CsHostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kMacAddressFieldNumber = 3,
    kActiveFieldNumber = 4,
  };
  // string cpuId = 1;
  void clear_cpuid();
  const std::string& cpuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpuid();
  std::string* release_cpuid();
  void set_allocated_cpuid(std::string* cpuid);
  private:
  const std::string& _internal_cpuid() const;
  void _internal_set_cpuid(const std::string& value);
  std::string* _internal_mutable_cpuid();
  public:

  // string deviceId = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string macAddress = 3;
  void clear_macaddress();
  const std::string& macaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_macaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_macaddress();
  std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // int32 active = 4;
  void clear_active();
  ::PROTOBUF_NAMESPACE_ID::int32 active() const;
  void set_active(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active() const;
  void _internal_set_active(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CsHostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class ScReplyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.ScReplyInfo) */ {
 public:
  inline ScReplyInfo() : ScReplyInfo(nullptr) {}
  ~ScReplyInfo() override;
  explicit constexpr ScReplyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScReplyInfo(const ScReplyInfo& from);
  ScReplyInfo(ScReplyInfo&& from) noexcept
    : ScReplyInfo() {
    *this = ::std::move(from);
  }

  inline ScReplyInfo& operator=(const ScReplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScReplyInfo& operator=(ScReplyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScReplyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScReplyInfo* internal_default_instance() {
    return reinterpret_cast<const ScReplyInfo*>(
               &_ScReplyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScReplyInfo& a, ScReplyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ScReplyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScReplyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScReplyInfo* New() const final {
    return CreateMaybeMessage<ScReplyInfo>(nullptr);
  }

  ScReplyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScReplyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScReplyInfo& from);
  void MergeFrom(const ScReplyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScReplyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.ScReplyInfo";
  }
  protected:
  explicit ScReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string registerId = 2;
  void clear_registerid();
  const std::string& registerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_registerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_registerid();
  std::string* release_registerid();
  void set_allocated_registerid(std::string* registerid);
  private:
  const std::string& _internal_registerid() const;
  void _internal_set_registerid(const std::string& value);
  std::string* _internal_mutable_registerid();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.ScReplyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registerid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CsRequestAuth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CsRequestAuth) */ {
 public:
  inline CsRequestAuth() : CsRequestAuth(nullptr) {}
  ~CsRequestAuth() override;
  explicit constexpr CsRequestAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsRequestAuth(const CsRequestAuth& from);
  CsRequestAuth(CsRequestAuth&& from) noexcept
    : CsRequestAuth() {
    *this = ::std::move(from);
  }

  inline CsRequestAuth& operator=(const CsRequestAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRequestAuth& operator=(CsRequestAuth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsRequestAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsRequestAuth* internal_default_instance() {
    return reinterpret_cast<const CsRequestAuth*>(
               &_CsRequestAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CsRequestAuth& a, CsRequestAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRequestAuth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsRequestAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsRequestAuth* New() const final {
    return CreateMaybeMessage<CsRequestAuth>(nullptr);
  }

  CsRequestAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsRequestAuth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsRequestAuth& from);
  void MergeFrom(const CsRequestAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRequestAuth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CsRequestAuth";
  }
  protected:
  explicit CsRequestAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
  };
  // string password = 1;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CsRequestAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CsWheelEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CsWheelEvent) */ {
 public:
  inline CsWheelEvent() : CsWheelEvent(nullptr) {}
  ~CsWheelEvent() override;
  explicit constexpr CsWheelEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsWheelEvent(const CsWheelEvent& from);
  CsWheelEvent(CsWheelEvent&& from) noexcept
    : CsWheelEvent() {
    *this = ::std::move(from);
  }

  inline CsWheelEvent& operator=(const CsWheelEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsWheelEvent& operator=(CsWheelEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsWheelEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsWheelEvent* internal_default_instance() {
    return reinterpret_cast<const CsWheelEvent*>(
               &_CsWheelEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CsWheelEvent& a, CsWheelEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CsWheelEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsWheelEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsWheelEvent* New() const final {
    return CreateMaybeMessage<CsWheelEvent>(nullptr);
  }

  CsWheelEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsWheelEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsWheelEvent& from);
  void MergeFrom(const CsWheelEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsWheelEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CsWheelEvent";
  }
  protected:
  explicit CsWheelEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaposFieldNumber = 1,
  };
  // bool deltapos = 1;
  void clear_deltapos();
  bool deltapos() const;
  void set_deltapos(bool value);
  private:
  bool _internal_deltapos() const;
  void _internal_set_deltapos(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CsWheelEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool deltapos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Exchange

// .BigPack.Exchange.DataType type = 1;
inline void Exchange::clear_type() {
  type_ = 0;
}
inline ::BigPack::Exchange_DataType Exchange::_internal_type() const {
  return static_cast< ::BigPack::Exchange_DataType >(type_);
}
inline ::BigPack::Exchange_DataType Exchange::type() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.type)
  return _internal_type();
}
inline void Exchange::_internal_set_type(::BigPack::Exchange_DataType value) {
  
  type_ = value;
}
inline void Exchange::set_type(::BigPack::Exchange_DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BigPack.Exchange.type)
}

// string resourceId = 2;
inline void Exchange::clear_resourceid() {
  resourceid_.ClearToEmpty();
}
inline const std::string& Exchange::resourceid() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.resourceId)
  return _internal_resourceid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Exchange::set_resourceid(ArgT0&& arg0, ArgT... args) {
 
 resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.Exchange.resourceId)
}
inline std::string* Exchange::mutable_resourceid() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.resourceId)
  return _internal_mutable_resourceid();
}
inline const std::string& Exchange::_internal_resourceid() const {
  return resourceid_.Get();
}
inline void Exchange::_internal_set_resourceid(const std::string& value) {
  
  resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Exchange::_internal_mutable_resourceid() {
  
  return resourceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Exchange::release_resourceid() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.resourceId)
  return resourceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Exchange::set_allocated_resourceid(std::string* resourceid) {
  if (resourceid != nullptr) {
    
  } else {
    
  }
  resourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.resourceId)
}

// string targetId = 3;
inline void Exchange::clear_targetid() {
  targetid_.ClearToEmpty();
}
inline const std::string& Exchange::targetid() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.targetId)
  return _internal_targetid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Exchange::set_targetid(ArgT0&& arg0, ArgT... args) {
 
 targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.Exchange.targetId)
}
inline std::string* Exchange::mutable_targetid() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.targetId)
  return _internal_mutable_targetid();
}
inline const std::string& Exchange::_internal_targetid() const {
  return targetid_.Get();
}
inline void Exchange::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Exchange::_internal_mutable_targetid() {
  
  return targetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Exchange::release_targetid() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.targetId)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Exchange::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.targetId)
}

// int32 errorCode = 4;
inline void Exchange::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Exchange::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Exchange::errorcode() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.errorCode)
  return _internal_errorcode();
}
inline void Exchange::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void Exchange::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:BigPack.Exchange.errorCode)
}

// .BigPack.CsHostInfo hostInfo = 5;
inline bool Exchange::_internal_has_hostinfo() const {
  return dataBody_case() == kHostInfo;
}
inline bool Exchange::has_hostinfo() const {
  return _internal_has_hostinfo();
}
inline void Exchange::set_has_hostinfo() {
  _oneof_case_[0] = kHostInfo;
}
inline void Exchange::clear_hostinfo() {
  if (_internal_has_hostinfo()) {
    if (GetArena() == nullptr) {
      delete dataBody_.hostinfo_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CsHostInfo* Exchange::release_hostinfo() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.hostInfo)
  if (_internal_has_hostinfo()) {
    clear_has_dataBody();
      ::BigPack::CsHostInfo* temp = dataBody_.hostinfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.hostinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CsHostInfo& Exchange::_internal_hostinfo() const {
  return _internal_has_hostinfo()
      ? *dataBody_.hostinfo_
      : reinterpret_cast< ::BigPack::CsHostInfo&>(::BigPack::_CsHostInfo_default_instance_);
}
inline const ::BigPack::CsHostInfo& Exchange::hostinfo() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.hostInfo)
  return _internal_hostinfo();
}
inline ::BigPack::CsHostInfo* Exchange::unsafe_arena_release_hostinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.hostInfo)
  if (_internal_has_hostinfo()) {
    clear_has_dataBody();
    ::BigPack::CsHostInfo* temp = dataBody_.hostinfo_;
    dataBody_.hostinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_hostinfo(::BigPack::CsHostInfo* hostinfo) {
  clear_dataBody();
  if (hostinfo) {
    set_has_hostinfo();
    dataBody_.hostinfo_ = hostinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.hostInfo)
}
inline ::BigPack::CsHostInfo* Exchange::_internal_mutable_hostinfo() {
  if (!_internal_has_hostinfo()) {
    clear_dataBody();
    set_has_hostinfo();
    dataBody_.hostinfo_ = CreateMaybeMessage< ::BigPack::CsHostInfo >(GetArena());
  }
  return dataBody_.hostinfo_;
}
inline ::BigPack::CsHostInfo* Exchange::mutable_hostinfo() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.hostInfo)
  return _internal_mutable_hostinfo();
}

// .BigPack.ScReplyInfo replyInfo = 6;
inline bool Exchange::_internal_has_replyinfo() const {
  return dataBody_case() == kReplyInfo;
}
inline bool Exchange::has_replyinfo() const {
  return _internal_has_replyinfo();
}
inline void Exchange::set_has_replyinfo() {
  _oneof_case_[0] = kReplyInfo;
}
inline void Exchange::clear_replyinfo() {
  if (_internal_has_replyinfo()) {
    if (GetArena() == nullptr) {
      delete dataBody_.replyinfo_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::ScReplyInfo* Exchange::release_replyinfo() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.replyInfo)
  if (_internal_has_replyinfo()) {
    clear_has_dataBody();
      ::BigPack::ScReplyInfo* temp = dataBody_.replyinfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.replyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::ScReplyInfo& Exchange::_internal_replyinfo() const {
  return _internal_has_replyinfo()
      ? *dataBody_.replyinfo_
      : reinterpret_cast< ::BigPack::ScReplyInfo&>(::BigPack::_ScReplyInfo_default_instance_);
}
inline const ::BigPack::ScReplyInfo& Exchange::replyinfo() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.replyInfo)
  return _internal_replyinfo();
}
inline ::BigPack::ScReplyInfo* Exchange::unsafe_arena_release_replyinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.replyInfo)
  if (_internal_has_replyinfo()) {
    clear_has_dataBody();
    ::BigPack::ScReplyInfo* temp = dataBody_.replyinfo_;
    dataBody_.replyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_replyinfo(::BigPack::ScReplyInfo* replyinfo) {
  clear_dataBody();
  if (replyinfo) {
    set_has_replyinfo();
    dataBody_.replyinfo_ = replyinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.replyInfo)
}
inline ::BigPack::ScReplyInfo* Exchange::_internal_mutable_replyinfo() {
  if (!_internal_has_replyinfo()) {
    clear_dataBody();
    set_has_replyinfo();
    dataBody_.replyinfo_ = CreateMaybeMessage< ::BigPack::ScReplyInfo >(GetArena());
  }
  return dataBody_.replyinfo_;
}
inline ::BigPack::ScReplyInfo* Exchange::mutable_replyinfo() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.replyInfo)
  return _internal_mutable_replyinfo();
}

// .BigPack.CsRequestAuth requestAuth = 7;
inline bool Exchange::_internal_has_requestauth() const {
  return this != internal_default_instance() && requestauth_ != nullptr;
}
inline bool Exchange::has_requestauth() const {
  return _internal_has_requestauth();
}
inline void Exchange::clear_requestauth() {
  if (GetArena() == nullptr && requestauth_ != nullptr) {
    delete requestauth_;
  }
  requestauth_ = nullptr;
}
inline const ::BigPack::CsRequestAuth& Exchange::_internal_requestauth() const {
  const ::BigPack::CsRequestAuth* p = requestauth_;
  return p != nullptr ? *p : reinterpret_cast<const ::BigPack::CsRequestAuth&>(
      ::BigPack::_CsRequestAuth_default_instance_);
}
inline const ::BigPack::CsRequestAuth& Exchange::requestauth() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.requestAuth)
  return _internal_requestauth();
}
inline void Exchange::unsafe_arena_set_allocated_requestauth(
    ::BigPack::CsRequestAuth* requestauth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requestauth_);
  }
  requestauth_ = requestauth;
  if (requestauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.requestAuth)
}
inline ::BigPack::CsRequestAuth* Exchange::release_requestauth() {
  
  ::BigPack::CsRequestAuth* temp = requestauth_;
  requestauth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BigPack::CsRequestAuth* Exchange::unsafe_arena_release_requestauth() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.requestAuth)
  
  ::BigPack::CsRequestAuth* temp = requestauth_;
  requestauth_ = nullptr;
  return temp;
}
inline ::BigPack::CsRequestAuth* Exchange::_internal_mutable_requestauth() {
  
  if (requestauth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BigPack::CsRequestAuth>(GetArena());
    requestauth_ = p;
  }
  return requestauth_;
}
inline ::BigPack::CsRequestAuth* Exchange::mutable_requestauth() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.requestAuth)
  return _internal_mutable_requestauth();
}
inline void Exchange::set_allocated_requestauth(::BigPack::CsRequestAuth* requestauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requestauth_;
  }
  if (requestauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestauth);
    if (message_arena != submessage_arena) {
      requestauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestauth, submessage_arena);
    }
    
  } else {
    
  }
  requestauth_ = requestauth;
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.requestAuth)
}

// .BigPack.CsWheelEvent wheelEvent = 8;
inline bool Exchange::_internal_has_wheelevent() const {
  return this != internal_default_instance() && wheelevent_ != nullptr;
}
inline bool Exchange::has_wheelevent() const {
  return _internal_has_wheelevent();
}
inline void Exchange::clear_wheelevent() {
  if (GetArena() == nullptr && wheelevent_ != nullptr) {
    delete wheelevent_;
  }
  wheelevent_ = nullptr;
}
inline const ::BigPack::CsWheelEvent& Exchange::_internal_wheelevent() const {
  const ::BigPack::CsWheelEvent* p = wheelevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::BigPack::CsWheelEvent&>(
      ::BigPack::_CsWheelEvent_default_instance_);
}
inline const ::BigPack::CsWheelEvent& Exchange::wheelevent() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.wheelEvent)
  return _internal_wheelevent();
}
inline void Exchange::unsafe_arena_set_allocated_wheelevent(
    ::BigPack::CsWheelEvent* wheelevent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheelevent_);
  }
  wheelevent_ = wheelevent;
  if (wheelevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.wheelEvent)
}
inline ::BigPack::CsWheelEvent* Exchange::release_wheelevent() {
  
  ::BigPack::CsWheelEvent* temp = wheelevent_;
  wheelevent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BigPack::CsWheelEvent* Exchange::unsafe_arena_release_wheelevent() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.wheelEvent)
  
  ::BigPack::CsWheelEvent* temp = wheelevent_;
  wheelevent_ = nullptr;
  return temp;
}
inline ::BigPack::CsWheelEvent* Exchange::_internal_mutable_wheelevent() {
  
  if (wheelevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::BigPack::CsWheelEvent>(GetArena());
    wheelevent_ = p;
  }
  return wheelevent_;
}
inline ::BigPack::CsWheelEvent* Exchange::mutable_wheelevent() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.wheelEvent)
  return _internal_mutable_wheelevent();
}
inline void Exchange::set_allocated_wheelevent(::BigPack::CsWheelEvent* wheelevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wheelevent_;
  }
  if (wheelevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wheelevent);
    if (message_arena != submessage_arena) {
      wheelevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheelevent, submessage_arena);
    }
    
  } else {
    
  }
  wheelevent_ = wheelevent;
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.wheelEvent)
}

inline bool Exchange::has_dataBody() const {
  return dataBody_case() != DATABODY_NOT_SET;
}
inline void Exchange::clear_has_dataBody() {
  _oneof_case_[0] = DATABODY_NOT_SET;
}
inline Exchange::DataBodyCase Exchange::dataBody_case() const {
  return Exchange::DataBodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WMHeartBeat

// -------------------------------------------------------------------

// CsHostInfo

// string cpuId = 1;
inline void CsHostInfo::clear_cpuid() {
  cpuid_.ClearToEmpty();
}
inline const std::string& CsHostInfo::cpuid() const {
  // @@protoc_insertion_point(field_get:BigPack.CsHostInfo.cpuId)
  return _internal_cpuid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsHostInfo::set_cpuid(ArgT0&& arg0, ArgT... args) {
 
 cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsHostInfo.cpuId)
}
inline std::string* CsHostInfo::mutable_cpuid() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsHostInfo.cpuId)
  return _internal_mutable_cpuid();
}
inline const std::string& CsHostInfo::_internal_cpuid() const {
  return cpuid_.Get();
}
inline void CsHostInfo::_internal_set_cpuid(const std::string& value) {
  
  cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsHostInfo::_internal_mutable_cpuid() {
  
  return cpuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsHostInfo::release_cpuid() {
  // @@protoc_insertion_point(field_release:BigPack.CsHostInfo.cpuId)
  return cpuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsHostInfo::set_allocated_cpuid(std::string* cpuid) {
  if (cpuid != nullptr) {
    
  } else {
    
  }
  cpuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsHostInfo.cpuId)
}

// string deviceId = 2;
inline void CsHostInfo::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& CsHostInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:BigPack.CsHostInfo.deviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsHostInfo::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsHostInfo.deviceId)
}
inline std::string* CsHostInfo::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsHostInfo.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& CsHostInfo::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void CsHostInfo::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsHostInfo::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsHostInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:BigPack.CsHostInfo.deviceId)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsHostInfo::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsHostInfo.deviceId)
}

// string macAddress = 3;
inline void CsHostInfo::clear_macaddress() {
  macaddress_.ClearToEmpty();
}
inline const std::string& CsHostInfo::macaddress() const {
  // @@protoc_insertion_point(field_get:BigPack.CsHostInfo.macAddress)
  return _internal_macaddress();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsHostInfo::set_macaddress(ArgT0&& arg0, ArgT... args) {
 
 macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsHostInfo.macAddress)
}
inline std::string* CsHostInfo::mutable_macaddress() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsHostInfo.macAddress)
  return _internal_mutable_macaddress();
}
inline const std::string& CsHostInfo::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void CsHostInfo::_internal_set_macaddress(const std::string& value) {
  
  macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsHostInfo::_internal_mutable_macaddress() {
  
  return macaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsHostInfo::release_macaddress() {
  // @@protoc_insertion_point(field_release:BigPack.CsHostInfo.macAddress)
  return macaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsHostInfo::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsHostInfo.macAddress)
}

// int32 active = 4;
inline void CsHostInfo::clear_active() {
  active_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsHostInfo::_internal_active() const {
  return active_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsHostInfo::active() const {
  // @@protoc_insertion_point(field_get:BigPack.CsHostInfo.active)
  return _internal_active();
}
inline void CsHostInfo::_internal_set_active(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  active_ = value;
}
inline void CsHostInfo::set_active(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:BigPack.CsHostInfo.active)
}

// -------------------------------------------------------------------

// ScReplyInfo

// bool success = 1;
inline void ScReplyInfo::clear_success() {
  success_ = false;
}
inline bool ScReplyInfo::_internal_success() const {
  return success_;
}
inline bool ScReplyInfo::success() const {
  // @@protoc_insertion_point(field_get:BigPack.ScReplyInfo.success)
  return _internal_success();
}
inline void ScReplyInfo::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ScReplyInfo::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BigPack.ScReplyInfo.success)
}

// string registerId = 2;
inline void ScReplyInfo::clear_registerid() {
  registerid_.ClearToEmpty();
}
inline const std::string& ScReplyInfo::registerid() const {
  // @@protoc_insertion_point(field_get:BigPack.ScReplyInfo.registerId)
  return _internal_registerid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ScReplyInfo::set_registerid(ArgT0&& arg0, ArgT... args) {
 
 registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.ScReplyInfo.registerId)
}
inline std::string* ScReplyInfo::mutable_registerid() {
  // @@protoc_insertion_point(field_mutable:BigPack.ScReplyInfo.registerId)
  return _internal_mutable_registerid();
}
inline const std::string& ScReplyInfo::_internal_registerid() const {
  return registerid_.Get();
}
inline void ScReplyInfo::_internal_set_registerid(const std::string& value) {
  
  registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ScReplyInfo::_internal_mutable_registerid() {
  
  return registerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScReplyInfo::release_registerid() {
  // @@protoc_insertion_point(field_release:BigPack.ScReplyInfo.registerId)
  return registerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScReplyInfo::set_allocated_registerid(std::string* registerid) {
  if (registerid != nullptr) {
    
  } else {
    
  }
  registerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.ScReplyInfo.registerId)
}

// -------------------------------------------------------------------

// CsRequestAuth

// string password = 1;
inline void CsRequestAuth::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& CsRequestAuth::password() const {
  // @@protoc_insertion_point(field_get:BigPack.CsRequestAuth.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsRequestAuth::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsRequestAuth.password)
}
inline std::string* CsRequestAuth::mutable_password() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsRequestAuth.password)
  return _internal_mutable_password();
}
inline const std::string& CsRequestAuth::_internal_password() const {
  return password_.Get();
}
inline void CsRequestAuth::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsRequestAuth::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsRequestAuth::release_password() {
  // @@protoc_insertion_point(field_release:BigPack.CsRequestAuth.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsRequestAuth::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsRequestAuth.password)
}

// -------------------------------------------------------------------

// CsWheelEvent

// bool deltapos = 1;
inline void CsWheelEvent::clear_deltapos() {
  deltapos_ = false;
}
inline bool CsWheelEvent::_internal_deltapos() const {
  return deltapos_;
}
inline bool CsWheelEvent::deltapos() const {
  // @@protoc_insertion_point(field_get:BigPack.CsWheelEvent.deltapos)
  return _internal_deltapos();
}
inline void CsWheelEvent::_internal_set_deltapos(bool value) {
  
  deltapos_ = value;
}
inline void CsWheelEvent::set_deltapos(bool value) {
  _internal_set_deltapos(value);
  // @@protoc_insertion_point(field_set:BigPack.CsWheelEvent.deltapos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BigPack

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BigPack::Exchange_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BigPack::Exchange_DataType>() {
  return ::BigPack::Exchange_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Exchange_2eproto
